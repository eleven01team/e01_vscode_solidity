"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var AuthService_1 = require("./AuthService");
var AnalysesService_1 = require("./AnalysesService");
/**
 * Main service exposed to outside.
 * Needs to be instantiated with username, password, toolName (optional) and environment (optional) fields. If no environment specified it will default to prod.
 * Please note that this is exported as `Client`.
 * @example
 * `import { Client } from 'mythxjs'`.
 *
 * `const mythx = new Client('0x0000000000000000000000000000000000000000', 'trial', 'testTool', 'https://staging.api.mythx.io/v1/');`
 */
var ClientService = /** @class */ (function () {
    function ClientService(ethAddress, password, toolName, environment) {
        if (toolName === void 0) { toolName = 'MythXJS'; }
        if (environment === void 0) { environment = 'https://api.mythx.io/v1'; }
        this.ethAddress = ethAddress;
        this.password = password;
        ClientService.MYTHX_API_ENVIRONMENT = environment;
        this.authService = new AuthService_1.AuthService(ethAddress, password);
        this.toolName = toolName;
    }
    /**
     *  Login to the API using ethAddress and password specified in the library constructor.
     * @param ethAddress Ethereum address for Mythx account
     * @param password  Password for Ethereum address
     * @return {Promise<JwtTokensInterface>}  Returns an object containing two tokens (access+refresh) that can be saved in storage.
     */
    ClientService.prototype.login = function (ethAddress, password) {
        return __awaiter(this, void 0, void 0, function () {
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (ethAddress && password) {
                            this.ethAddress = ethAddress;
                            this.password = password;
                        }
                        _a = this;
                        return [4 /*yield*/, this.authService.login(this.ethAddress, this.password)];
                    case 1:
                        _a.jwtTokens = _b.sent();
                        this.analysesService = new AnalysesService_1.AnalysesService(this.jwtTokens, this.toolName);
                        return [2 /*return*/, this.jwtTokens];
                }
            });
        });
    };
    /**
     *  Login to the API using a set of pre-existing tokens.
     *   Can be used when user has previously log in and stored those tokens in memory.
     * @param jwtTokens object containing access + refresh token
     * - example: loginWithToken({access:'foo', refresh: 'foo2'})
     * @return {void}
     */
    ClientService.prototype.loginWithToken = function (jwtTokens) {
        this.analysesService = new AnalysesService_1.AnalysesService(jwtTokens);
    };
    /**
     *  Login to the API using metamask challenge result message.
     *  In order to get the object containing the message use `getChallenge` and handle Metamask login in the frontend.
     * @param signature Signature passed by provider. In case of metamask this will be returned after signing challenge.
     * @param provider pass a provider value for the HTTP headers. If nothing is passed defaults to MetaMask
     * @return {Promise<JwtTokensInterface>}  Returns an object containing two tokens (access+refresh) that can be saved in storage.
     */
    ClientService.prototype.loginWithSignature = function (signature, provider) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.authService.loginWithSignature(signature, provider)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     *  Generates authentication challenge (Metamask only for now).
     *  The Metamask flow needs to be handled on the front end since MythXJS does not have Web3 dependencies.
     * @param ethAddress Ethereum address for Mythx account
     * @returns Resolves with API response or throw error
     */
    ClientService.prototype.getChallenge = function (ethAddress) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.authService.getChallenge(ethAddress)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     *  Logout from the API.
     * @returns Resolves with API response or throw error
     */
    ClientService.prototype.logout = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.authService.logout()];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     *   Returns API current version.
     *   Does not require login.
     */
    ClientService.prototype.getVersion = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.authService.getVersion()];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     *   Returns API stats.
     *   Internal only, needs admin credentials to be accessed.
     */
    ClientService.prototype.getStats = function (queryString) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.authService.getStats(queryString)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Retrieve list of registred API users or just caller user object if no required permission.
     * @param queryString Query string for detailed list (query parameters: offset, orderBy, email, ethAddress)
     * @returns Resolves with API response or throw error
     */
    ClientService.prototype.getUsers = function (queryString) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.authService.getUsers(queryString)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    ClientService.prototype.getAnalysesList = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.analysesService.getAnalysesList()];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Get status for analysis on given UUID.
     * @param uuid - unique identifier of analysis job
     * @return {Promise<any>} Resolves with API response, or throws error
     */
    ClientService.prototype.getAnalysisStatus = function (uuid) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.analysesService.getAnalysisStatus(uuid)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Gets the array of issues from the API.
     *
     * @param {String} uuid - unique identifier of analysis job
     * @returns {Promise} Resolves with API response, or throws error
     */
    ClientService.prototype.getDetectedIssues = function (uuid) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.analysesService.getDetectedIssues(uuid)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Submit a smart contract using bytecode only.
     *
     * @param {String} bytecode - Compiled bytecode of a smart contract for example "0xfe".
     * @return {Promise} Resolves with API response, or throws an
     *  an error.
     */
    ClientService.prototype.submitBytecode = function (bytecode) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.analysesService.submitBytecode(bytecode)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Submit a smart contract using sourcecode only.
     *
     * @param {String} sourceCode - String containing smart contract sourcecode.
     * @param {String} contractName - Name of the contract to submit for analysis.
     * @return {Promise} Resolves with API response, or throws an
     *  an error.
     */
    ClientService.prototype.submitSourceCode = function (sourceCode, contractName) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.analysesService.submitSourceCode(sourceCode, contractName)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Submit a smart contract using custom parameters.
     *
     * @param {Object} options - Object containing options to submit to API
     * @return {Promise} Resolves with API response, or throws an
     *  an error.
     */
    ClientService.prototype.analyze = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.analysesService.analyze(options)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    return ClientService;
}());
exports.ClientService = ClientService;
